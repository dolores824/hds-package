"""
This module provides functions to visualize and extract correlation information from DataFrames.

Function:
- cor_heatmap(df): 
Plot a heatmap of correlation matrix of a DataFrame.

Class:
- Feature
A class for selecting features in a dataset and visualizing their correlations.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.special import boxcox1p

def cor_heatmap(df):
    """Plot a heatmap of correlation matrix of a DataFrame

    Args:
        df (pandas dataframe): DataFrame to plot correlation heatmap

    Returns:
        A correlation heatmap generated by seaborn package.
        The darker the color, the higher the relevance.
        The blue stands for positive correlation, the red stands for negative correlation.
    """
    plt.figure(figsize=(20,20))
    corrmat=df.corr()
    sns.heatmap(corrmat,cmap='RdBu',vmin=-0.6,vmax=0.6)

class Feature():
    """
    A class for selecting features in a dataset and visualizing their correlations.

    Args:
        df (pandas.DataFrame): DataFrame to extract features from.
        target_column (str): Name of the target column used for correlation calculations.
        k (int): Number of most correlated features to return. Default is 20.
        full (bool): If True, all features will be returned (except the target column). 
                     Default is False.
    """

    def __init__(self, 
                 df, 
                 target_column, 
                 k=20, 
                 full=False):

        self.df = df
        self.target_column = target_column
        self.k = k
        self.full = full

    def most_correlated(self):
        """Return the most correlated k features 
        
        Args:
            df (pandas.DataFrame): DataFrame to extract
            target_column (str): prediction or target column name
            k (int): number of correlated features to return
            
        Returns:
            list: list of correlated feature names

        Returns:
            A correlation heatmap generated by seaborn package
        """
        cols = self.df.corr().nlargest(self.k+1, self.target_column)[self.target_column].index
        return cols

    def feature_list(self):
        """Return a list of features to be used in the model, 
        either the most correlated features or all features in the dataframe 

        Returns:
            feature_list (list): list of features
        """
        if self.full == False:
            feature_list = list(self.most_correlated())
            feature_list.remove(self.target_column)
            return feature_list
        else:
            feature_list = list(self.df.columns)
            feature_list.remove(self.target_column)
            return feature_list

    def view_correlations(self):
        """Return correlation matrix for selected columns in a DataFrame
        
        Args:
            df (pandas.DataFrame): DataFrame to extract correlation matrix
            columns (list of str): list of column names to view correlations
            
        Returns:
            pandas.DataFrame: correlation matrix of selected columns
        """
        columns = self.most_correlated()
        return self.df[columns].corr()

    def most_related_heatmap(self):
        """Plot heatmap of most related columns based on correlation matrix
        
        Args:
            correlations (pandas.DataFrame): correlation matrix
            most_related_columns (list of str): list of most related column names
            
        Returns:
            A correlation heatmap generated by seaborn package
        """
        plt.subplots(figsize=(10,8))
        correlations = self.view_correlations()
        most_related_columns = self.most_correlated()
        sns.heatmap(correlations, cbar=True, 
                        annot=True, 
                        square=True, 
                        cmap = 'Blues',
                        fmt='.2f',
                        vmin = 0,
                        vmax = 0.8,
                        annot_kws={'size': 10}, 
                        yticklabels=most_related_columns.values, xticklabels=most_related_columns.values)
